/* gtkemu8086
 * Copyright 2020 KRC
 *
 * Permission is hereby granted, free of charge, to any person obtaining 
 * a copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to 
 * permit persons to whom the Software is furnished to do so, subject 
 * to the following conditions: 
 *
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software. 
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE. 
 *
 * (i.e. the MIT License)
 *
 * code.c
 * General emulation functions
 */

#ifndef _OPCODES_H_
#define _OPCODES_H_

enum instruction_set_enum
{
    ADD_D8_R8 = 0x00,
    ADD_D16_R16 = 0x01,
    ADD_R8_D8 = 0x02,
    ADD_R16_D16 = 0x03,
    ADD_AL_I8 = 0x04,
    ADD_AX_I16 = 0x05,
    PUSH_ES = 0x06,
    POP_ES = 0x07,
    OR_D8_R8 = 0x08,
    OR_D16_R16 = 0x09,
    OR_R8_D8 = 0x0a,
    OR_R16_D16 = 0x0b,
    OR_AL_I8 = 0x0c,
    OR_AX_I16 = 0x0D,
    PUSH_CS = 0x0e,
    ADC_D8_R8 = 0x10,
    ADC_D16_R16 = 0x11,
    ADC_R8_D8 = 0x12,
    ADC_R16_D16 = 0x13,
    ADC_AL_I8 = 0x14,
    ADC_AX_I16 = 0x15,
    PUSH_SS = 0x16,
    POP_SS = 0x17,
    SBB_D8_R8 = 0x18,
    SBB_D16_R16 = 0x19,
    SBB_R8_D8 = 0x1a,
    SBB_R16_D16 = 0x1b,
    SBB_AL_I8 = 0x1c,
    SBB_AX_I16 = 0x1D,
    PUSH_DS = 0x1e,
    POP_DS = 0x1f,
    AND_D8_R8 = 0x20,
    AND_D16_R16 = 0x21,
    AND_R8_D8 = 0x22,
    AND_R16_D16 = 0x23,
    AND_AL_I8 = 0x24,
    AND_AX_I16 = 0x25,
    // ES = 0x26,
    DAA = 0x27,
    SUB_D8_R8 = 0x28,
    SUB_D16_R16 = 0x29,
    SUB_R8_D8 = 0x2a,
    SUB_R16_D16 = 0x2b,
    SUB_AL_I8 = 0x2c,
    SUB_AX_I16 = 0x2D,
    //  CS = 0x2e,
    DAS = 0x2f,
    XOR_D8_R8 = 0x30,
    XOR_D16_R16 = 0x31,
    XOR_R8_D8 = 0x32,
    XOR_R16_D16 = 0x33,
    XOR_AL_I8 = 0x34,
    XOR_AX_I16 = 0x35,
    SS = 0x36,
    AAA = 0x37,
    CMP_D8_R8 = 0x38,
    CMP_D16_R16 = 0x39,
    CMP_R8_D8 = 0x3a,
    CMP_R16_D16 = 0x3b,
    CMP_AL_I8 = 0x3c,
    CMP_AX_I16 = 0x3D,
    // DS = 0x3e,
    AAS = 0x3f,

    JO_A8 = 0x70,
    JNO_A8 = 0x71,
    JB_A8 = 0x72,
    JC_A8 = 0x72,
    JNB_A8 = 0x73,
    JNC_A8 = 0x73,
    JZ_A8 = 0x74,
    JNZ_A8 = 0x75,
    JE_A8 = 0x74,
    JNE_A8 = 0x75,
    JBE_A8 = 0x76,
    JA_A8 = 0x77,
    JS_A8 = 0x78,
    JNS_A8 = 0x79,
    JPE_A8 = 0x7a,
    JPO_A8 = 0x7b,
    JL_A8 = 0x7C,
    JGE_A8 = 0x7D,
    JLE_A8 = 0x7E,
    JG_A8 = 0x7F,
    ADD_D16_S8 = 0x83,
    OR_D16_S8 = 0x83,
    ADC_D16_S8 = 0x83,
    SBB_D16_S8 = 0x83,
    AND_D16_S8 = 0x83,
    SUB_D16_S8 = 0x83,
    XOR_D16_S8 = 0x83,
    CMP_D16_S8 = 0x83,
    ADD_D8_I8 = 0x80,
    OR_D8_I8 = 0x80,
    ADC_D8_I8 = 0x80,
    SBB_D8_I8 = 0x80,
    AND_D8_I8 = 0x80,
    SUB_D8_I8 = 0x80,
    XOR_D8_I8 = 0x80,
    CMP_D8_I8 = 0x80,
    ADD_D16_I16 = 0x81,
    OR_D16_I16 = 0x81,
    ADC_D16_I16 = 0x81,
    SBB_D16_I16 = 0x81,
    AND_D16_I16 = 0x81,
    SUB_D16_I16 = 0x81,
    XOR_D16_I16 = 0x81,
    CMP_D16_I16 = 0x81,
    TEST_D8_R8 = 0x84,
    TEST_R8_D8 = 0x84,
    TEST_D16_R16 = 0x85,
    TEST_R16_D16 = 0x85,

    MOV_AL_ADDR = 0xa0,
    MOV_AX_ADDR = 0xA1,
    MOV_ADDR_AL = 0xa2,
    MOV_ADDR_AX = 0xa3,
    MOV_D8_R8 = 0x88,
    MOV_D16_R16 = 0x89,
    MOV_R8_D8 = 0x8a,
    MOV_R16_D16 = 0x8b,

    MOV_D16_DS = 0x8c,
    LEA_R16_D16 = 0x8D,
    MOV_DS_D16 = 0x8e,

    POP_D16 = 0x8f,
    NOP = 0x90,
    // XCHG,
    XCHG_R16_AX = 0x91,
    XCHG_D8_R8 = 0x86,
    XCHG_R8_D8 = 0x86,
    XCHG_D16_R16 = 0x87,
    // XCHG_R16_D16 = 0x87 ,
    CBW = 0x98,
    CWD = 0x99,
    WAIT = 0x9b,
    PUSHF = 0x9c,
    POPF = 0x9d,
    SAHF = 0x9e,
    LAHF = 0x9f,
    MOVSB = 0xa4,
    MOVSW = 0xa5,
    CMPSB = 0xa6,
    CMPSW = 0xa7,
    TEST_AL_I8 = 0xa8,
    TEST_AX_I16 = 0xa9,
    STOSB = 0xaa,
    STOSW = 0xab,
    LODSB = 0xac,
    LODSW = 0xaD,
    SCASB = 0xae,
    SCASW = 0xaf,
    MOV_AL_I8 = 176,
    MOV_CL_I8 = 176 | 1,
    MOV_DL_I8 = 176 | 2,
    MOV_BL_I8 = 176 | 3,
    MOV_AH_I8 = 176 | 4,
    MOV_CH_I8 = 176 | 5,
    MOV_DH_I8 = 176 | 6,
    MOV_BH_I8 = 176 | 7,

    MOV_AX_I16 = 184,
    MOV_CX_I16 = 184 | 1,
    MOV_DX_I16 = 184 | 2,
    MOV_BX_I16 = 184 | 3,
    MOV_SP_I16 = 184 | 4,
    MOV_BP_I16 = 184 | 5,
    MOV_SI_I16 = 184 | 6,
    MOV_DI_I16 = 184 | 7,
    RET_I16 = 0xc2,
    RET = 0xc3,
    LES_R16_D16,
    LDS_R16_D16,
    MOV_DB8_I8,
    MOV_DW16_I16,
    RETF_I16 = 0xca,
    RETF = 0xcb,
    INT3 = 0xcc,
    INT_I8 = 0xcD,
    INTO = 0xce,
    IRET = 0xcf,

    AAM = 0xD4,
    AAD = 0xD5,
    XLAT = 0xD7,
    LOOPNZ_A8 = 0xe0,
    LOOPNE_A8 = 0xe0,
    LOOPZ_A8 = 0xe1,
    LOOPE_A8 = 0xe1,
    LOOP_A8 = 0xe2,
    JCXZ_A8 = 0xe3,
    IN_AL_DX = 0xec,
    IN_AX_DX = 0xeD,
    OUT_DX_AL = 0xee,
    OUT_DS_AX = 0xef,
    IN_AL = 0xe4,
    IN_AX = 0xe5,
    OUT_I8_AL = 0xe6,
    OUT_I8_AX = 0xe7,
    //CALL_FAR_D16 = 0xff ,
    JMP,
    CALL_f32 = 0x9a,
    JMP_f32 = 0xea,
    CALL_D16 = 0xff,
    JMP_D16 = 0xff,
    JMP_A8 = 0xeb,
    JMP_A16 = 0xe9,
    CALL_A16 = 0xe8,
    LOCK = 0xf0,

    HLT = 0xf4,
    CMC = 0xf5,
    // TEST_DB8_I8 = 0xf6 ,
    NOT_DB8 = 0xf6,
    // NEG_DB8 = 0xf6 ,
    MUL_DB8 = 0xf6,
    // IMUL_DB8 = 0xf6 ,
    DIV_DB8 = 0xf6,
    // IDIV_DB8 = 0xf6 ,
    REP = 0xf3,
    REPNE = 0xf2,
    TEST_DW16_I16 = 0xf7,
    NOT_DW16 = 0xf7,
    NEG_DW16 = 0xf7,
    MUL_DW16 = 0xf7,
    IMUL_DW16 = 0xf7,
    DIV_DW16 = 0xf7,
    IDIV_DW16 = 0xf7,
    CLC = 0xf8,
    STC = 0xf9,
    CLI = 0xfa,
    STI = 0xfb,
    CLD = 0xfc,
    STD = 0xfD,
    INC_DB8 = 0xfe,
    ROL_8_SAR_8 = 0xd0,
    ROL_8_SAR_16 = 0xd1,
    DEC_DB8 = 0xfe,
    INC_DW16 = 0xff,
    DEC_DW16 = 0xff,
    PUSH_D16 = 0xff,

};
#endif